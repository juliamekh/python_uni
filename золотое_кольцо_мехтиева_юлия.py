# -*- coding: utf-8 -*-
"""Золотое-Кольцо_Мехтиева_Юлия.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rtUhcg1ht5u2MUEdvipwrnUjxn4gkbn7
"""

import pandas as pd
import heapq

distances = pd.read_csv('Золотое-кольцо.csv', index_col=0)
distances

# Функция для поиска кратчайшего пути в графе с помощью алгоритма Дейкстры
def shortest_path(start, end, graph):
    heap = [(0, start)]
    visited = set()
    while heap:
        (cost, node) = heapq.heappop(heap)
        if node not in visited:
            visited.add(node)
            if node == end:
                return cost
            for neighbor in graph[node]:
                if neighbor not in visited:
                    heapq.heappush(heap, (cost + graph[node][neighbor], neighbor))
    return -1

cities = ['Москва', 'Сергиев Посад', 'Переславль-Залесский', 'Ростов', 'Ярославль', 'Кострома', 'Иваново', 'Суздаль', 'Владимир', 'Санкт-Петербург']

graph = {}
for city in cities:
    graph[city] = {}
    for neighbor in cities:
        if city != neighbor:
            graph[city][neighbor] = distances.loc[city, neighbor]

total_distance = 0
for i in range(len(cities)-1):
    start = cities[i]
    end = cities[i+1]
    distance = shortest_path(start, end, graph)
    total_distance += distance

print("Кратчайший путь через все города Золотого кольца: {} км".format(total_distance))